{
  "version": "3.2",
  "log": [
    {
      "WETH": {
        "src": "contracts\\libs\\weth.sol:5",
        "version": {
          "withMetadata": "4ccf5dcef0797540959e955c92f76539be1a146f1d9e9b2b577c95fd35193a03",
          "withoutMetadata": "246fe916204896b3fcb6c9d05ed21c847bdf91221351db9fda399c5376acc322",
          "linkedWithoutMetadata": "246fe916204896b3fcb6c9d05ed21c847bdf91221351db9fda399c5376acc322"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts\\libs\\weth.sol:6"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts\\libs\\weth.sol:7"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts\\libs\\weth.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETH",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\weth.sol:6"
            },
            {
              "contract": "WETH",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\weth.sol:7"
            },
            {
              "contract": "WETH",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\weth.sol:8"
            },
            {
              "contract": "WETH",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\weth.sol:15"
            },
            {
              "contract": "WETH",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\weth.sol:16"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\MockStakingRewards.sol:5",
        "version": {
          "withMetadata": "3b6ad16c9e421b42650bdece71bb3830669b38fcd3c708661ce077ea3d03c86b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts\\MockStakingRewards.sol:187"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexRouter.sol:701",
        "version": {
          "withMetadata": "13126f53f287a6871db2f47b1b20a7eac339900c76dd711a1a1cb9856a5c25d5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockGovToken": {
        "src": "contracts\\MGGovToken.sol:11",
        "version": {
          "withMetadata": "fc35e9dae23f92145942fb7c3a0be3b4d1af445d953a5a9d75c3086cb2744820",
          "withoutMetadata": "d4618de7c0239f9c5ce1aa5f1d93cb567963f8e732b32d8cc282ab458c3bd695",
          "linkedWithoutMetadata": "d4618de7c0239f9c5ce1aa5f1d93cb567963f8e732b32d8cc282ab458c3bd695"
        },
        "inherit": [
          "BEP20",
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "mintFunc(address,uint256)",
          "burnFunc(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockGovToken",
            "src": "contracts\\MGGovToken.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maximumSupply",
            "src": "contracts\\MGGovToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MockGovToken",
              "label": "_maximumSupply",
              "type": "t_uint256",
              "src": "contracts\\MGGovToken.sol:14"
            },
            {
              "contract": "MockGovToken",
              "label": "_router",
              "type": "t_address",
              "src": "contracts\\MGGovToken.sol:15"
            },
            {
              "contract": "MockGovToken",
              "label": "_pairWeth",
              "type": "t_address",
              "src": "contracts\\MGGovToken.sol:16"
            },
            {
              "contract": "MockGovToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\MGGovToken.sol:27"
            },
            {
              "contract": "MockGovToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)804_storage))",
              "src": "contracts\\MGGovToken.sol:36"
            },
            {
              "contract": "MockGovToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts\\MGGovToken.sol:39"
            },
            {
              "contract": "MockGovToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\MGGovToken.sol:50"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)804_storage))": {
              "label": "mapping(address => mapping(uint32 => struct MockGovToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)804_storage)": {
              "label": "mapping(uint32 => struct MockGovToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)804_storage": {
              "label": "struct MockGovToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Minion": {
        "src": "contracts\\MockAccessControl.sol:5",
        "version": {
          "withMetadata": "1cddb8612b6384ac291b0f05bcc4e4c6e4ca66eadcdf3057fccb48272e50c4ce",
          "withoutMetadata": "8e1c3d1ff7eb6b4b54bdbdbbdb6371bc725810405bffb0ac166ec927d4c880d9",
          "linkedWithoutMetadata": "8e1c3d1ff7eb6b4b54bdbdbbdb6371bc725810405bffb0ac166ec927d4c880d9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "pwn()",
          "verify(address)",
          "retrieve()",
          "timeVal()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Minion",
            "src": "contracts\\MockAccessControl.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Minion",
              "label": "contributionAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\MockAccessControl.sol:7"
            },
            {
              "contract": "Minion",
              "label": "pwned",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MockAccessControl.sol:8"
            },
            {
              "contract": "Minion",
              "label": "owner",
              "type": "t_address",
              "src": "contracts\\MockAccessControl.sol:9"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexRouter.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\MockStakingRewards.sol:303",
        "version": {
          "withMetadata": "59454877e2ecc731d3bccd91ea79ca80b32aa015c930243c42b8b2d054c66a3f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "mockStakingRewards": {
        "src": "contracts\\MockStakingRewards.sol:385",
        "version": {
          "withMetadata": "4f07233e3cc20765f348e37628fad65b2b2442c4d478a12ceacb7b5dbddf8c38",
          "withoutMetadata": "169808095d72d4477959b776b2824379470673e19be87f610fa1bb08a3f14d56",
          "linkedWithoutMetadata": "169808095d72d4477959b776b2824379470673e19be87f610fa1bb08a3f14d56"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "getUserDepositedAmount(address)",
          "getUserPendingReward(address)",
          "getTotalPending()",
          "getLatestRewardPerShare()",
          "getLpSupplyAndLastBlock()",
          "setMaxFundAmount(uint256)",
          "fund(uint256,uint256)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "harvest(address)",
          "sweep()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "mockStakingRewards",
            "src": "contracts\\MockStakingRewards.sol:454"
          },
          {
            "kind": "state-variable-immutable",
            "name": "startBlock",
            "src": "contracts\\MockStakingRewards.sol:414"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "mockStakingRewards",
              "label": "totalPaidOut",
              "type": "t_uint256",
              "src": "contracts\\MockStakingRewards.sol:417"
            },
            {
              "contract": "mockStakingRewards",
              "label": "rewardPerBlock",
              "type": "t_uint256",
              "src": "contracts\\MockStakingRewards.sol:419"
            },
            {
              "contract": "mockStakingRewards",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts\\MockStakingRewards.sol:421"
            },
            {
              "contract": "mockStakingRewards",
              "label": "lastFunded",
              "type": "t_uint256",
              "src": "contracts\\MockStakingRewards.sol:423"
            },
            {
              "contract": "mockStakingRewards",
              "label": "maxFundAmount",
              "type": "t_uint256",
              "src": "contracts\\MockStakingRewards.sol:425"
            },
            {
              "contract": "mockStakingRewards",
              "label": "mockTokenContract",
              "type": "t_contract(IERC20)2033",
              "src": "contracts\\MockStakingRewards.sol:432"
            },
            {
              "contract": "mockStakingRewards",
              "label": "mockLpTokenContract",
              "type": "t_contract(IERC20)2033",
              "src": "contracts\\MockStakingRewards.sol:434"
            },
            {
              "contract": "mockStakingRewards",
              "label": "poolInfo",
              "type": "t_struct(PoolInfo)2263_storage",
              "src": "contracts\\MockStakingRewards.sol:435"
            },
            {
              "contract": "mockStakingRewards",
              "label": "rewarder",
              "type": "t_address",
              "src": "contracts\\MockStakingRewards.sol:438"
            },
            {
              "contract": "mockStakingRewards",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)2258_storage)",
              "src": "contracts\\MockStakingRewards.sol:439"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)2033": {
              "label": "contract IERC20"
            },
            "t_struct(PoolInfo)2263_storage": {
              "label": "struct mockStakingRewards.PoolInfo",
              "members": [
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accmockPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(UserInfo)2258_storage)": {
              "label": "mapping(address => struct mockStakingRewards.UserInfo)"
            },
            "t_struct(UserInfo)2258_storage": {
              "label": "struct mockStakingRewards.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts\\interfaces\\IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:98",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\libs\\BEP20.sol:11",
        "version": {
          "withMetadata": "8b55ab2537f3b6fbc0c0b0c68e52f1c110ae4a7e709f7a85cfd0e08e5bcefceb",
          "withoutMetadata": "a7f6f87dd5bc80f26dc7d5650a4f7e23ad2d006b9272115a3d664b36114bb999",
          "linkedWithoutMetadata": "a7f6f87dd5bc80f26dc7d5650a4f7e23ad2d006b9272115a3d664b36114bb999"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string)",
          "getOwner()",
          "name()",
          "decimals()",
          "symbol()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\libs\\BEP20.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BEP20.sol:15"
            },
            {
              "contract": "BEP20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BEP20.sol:17"
            },
            {
              "contract": "BEP20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BEP20.sol:19"
            },
            {
              "contract": "BEP20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BEP20.sol:21"
            },
            {
              "contract": "BEP20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BEP20.sol:22"
            },
            {
              "contract": "BEP20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BEP20.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\IBEP20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "7787f3721d991064c748bc01d3963aee669e9f253481db0f3505f2e43a68813d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexFactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexRouter.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexRouter.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexRouter.sol:63",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexFactory.sol:550",
        "version": {
          "withMetadata": "ac52a32b1432c2011dc4248b4a2d68dbd9b299288fd682e537fa4ad440d1d345",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexFactory.sol:99",
        "version": {
          "withMetadata": "85a1270a46eebd49c119e03dd0b227eb6dda91243fb40434fffff6c4fe5f6f80",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexFactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexFactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexFactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexFactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexFactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexFactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexFactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexFactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexFactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexFactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexFactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexFactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexFactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexFactory.sol:464",
        "version": {
          "withMetadata": "7be1e6b83f236aa8daa2f0e0a41ac8d804213e5a1e0ce118c02d8a47a096d55e",
          "withoutMetadata": "6c36d9ff076a167d9314c2407ea20c9e07489a3b235b1f68db0576eee5c9e7d4",
          "linkedWithoutMetadata": "6c36d9ff076a167d9314c2407ea20c9e07489a3b235b1f68db0576eee5c9e7d4"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexFactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexFactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexFactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexFactory.sol:230",
        "version": {
          "withMetadata": "f16a6b472c1869e151e37eb8086602aaf530767bd12c27c6cbb69649ddebeeec",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexFactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexFactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexFactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexFactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexFactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexFactory.sol:575",
        "version": {
          "withMetadata": "e368888be935893a858ad4233714be8da19d328f27d7daf68b82ede5b55fa0c8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\libs\\dexRouter.sol:226",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapLibrary": {
        "src": "contracts\\libs\\dexRouter.sol:715",
        "version": {
          "withMetadata": "5d5905192367c9730046d5e66ebc1dfb2a0fcc65b86088f98f7cc95435c4094b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:232",
        "version": {
          "withMetadata": "3a75061e5a2aad288b810b4565a85e1aaf7b007f384d0485913cde6bd89c368d",
          "withoutMetadata": "d14a79cf16f41659db052cf831efb06d27e210c77c7f76f33e038f3c666a58e8",
          "linkedWithoutMetadata": "d14a79cf16f41659db052cf831efb06d27e210c77c7f76f33e038f3c666a58e8"
        },
        "inherit": [
          "IPancakeSwapRouter"
        ],
        "libraries": [
          "SafeMath",
          "PancakeSwapLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapRouter",
            "src": "contracts\\libs\\dexRouter.sol:243"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapRouter",
              "label": "factoryAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:235"
            },
            {
              "contract": "PancakeSwapRouter",
              "label": "WETHAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts\\libs\\dexRouter.sol:797",
        "version": {
          "withMetadata": "a32d230440022e23e0e5f063c09bae8fee627a5da51354d2e9b2644a1a8011ce",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "30f9e78633995fb4bb1f91645caaf10108a51f48ec2069569a7a1a1005549e9d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexRouter.sol:701",
        "version": {
          "withMetadata": "32cfe8193db133c85823de07ccef974e324e44785fcab2b81b9941e7d7f0493e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Minion": {
        "src": "contracts\\MockAccessControl.sol:5",
        "version": {
          "withMetadata": "6aee9ae813bf3380a07824907701f339b14971d0cd8eb9782f4e6f401e69a253",
          "withoutMetadata": "d83de79e9a549862ca369e32dab8afdc6a0691f7c0fe28c7ba8e646d062c618e",
          "linkedWithoutMetadata": "d83de79e9a549862ca369e32dab8afdc6a0691f7c0fe28c7ba8e646d062c618e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "pwn()",
          "verify(address)",
          "retrieve()",
          "timeVal()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Minion",
            "src": "contracts\\MockAccessControl.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Minion",
              "label": "contributionAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\MockAccessControl.sol:7"
            },
            {
              "contract": "Minion",
              "label": "pwned",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MockAccessControl.sol:8"
            },
            {
              "contract": "Minion",
              "label": "owner",
              "type": "t_address",
              "src": "contracts\\MockAccessControl.sol:9"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts\\interfaces\\IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:98",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexRouter.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexFactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexRouter.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexRouter.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexRouter.sol:63",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexFactory.sol:550",
        "version": {
          "withMetadata": "2ad0fe750e2862465dc6fc458a5998db81e752f9fa692a011f4bcfc811fe986b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexFactory.sol:99",
        "version": {
          "withMetadata": "6662f5e9890e30d14fb3cdd766c9d5d0193729ddc8a448b01d393c38bed603fb",
          "withoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797",
          "linkedWithoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexFactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexFactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexFactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexFactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexFactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexFactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexFactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexFactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexFactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexFactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexFactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexFactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexFactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexFactory.sol:464",
        "version": {
          "withMetadata": "91b126edcd90c235b173775e86c77b88ce5c65dcddc39cac6dc13d7d6b7e5cf3",
          "withoutMetadata": "5f681284d1d036a0815268777d3590fa9b021bf1ea0c3517fa57695c7fbd0e92",
          "linkedWithoutMetadata": "5f681284d1d036a0815268777d3590fa9b021bf1ea0c3517fa57695c7fbd0e92"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexFactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexFactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexFactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexFactory.sol:230",
        "version": {
          "withMetadata": "27ef6cddcbb5a25fafc78d0c5c08ac2f6a794f01b542f87183140a3239f9f606",
          "withoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0",
          "linkedWithoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexFactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexFactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexFactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexFactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexFactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexFactory.sol:575",
        "version": {
          "withMetadata": "c837e76e48173873b618884439b7c9caca834f61b51bfac215e3a83e653c96a1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\libs\\dexRouter.sol:226",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapLibrary": {
        "src": "contracts\\libs\\dexRouter.sol:715",
        "version": {
          "withMetadata": "5683c56f02846240647fdc4d60a32fd1c68d9d7b6a641f24dbf4c39a8b8571c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:232",
        "version": {
          "withMetadata": "b49b3842129aa5d28dc61a459b8d4e5cdc0960e055e8c6d2ffe30f1a9a48cfee",
          "withoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb",
          "linkedWithoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb"
        },
        "inherit": [
          "IPancakeSwapRouter"
        ],
        "libraries": [
          "SafeMath",
          "PancakeSwapLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapRouter",
            "src": "contracts\\libs\\dexRouter.sol:243"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapRouter",
              "label": "factoryAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:235"
            },
            {
              "contract": "PancakeSwapRouter",
              "label": "WETHAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts\\libs\\dexRouter.sol:797",
        "version": {
          "withMetadata": "ee33936235c73567de31c9cdbc1a09993bf12690e61dc5ccaf1c6ffcde7c38c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "bbcff4a844bcc6d88bc4102204a3192020ca0647fd98f516c30746a9ac660974",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\MockStakingRewards.sol:5",
        "version": {
          "withMetadata": "3b6ad16c9e421b42650bdece71bb3830669b38fcd3c708661ce077ea3d03c86b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts\\MockStakingRewards.sol:187"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexFactory.sol:534",
        "version": {
          "withMetadata": "16b37e3eb04f84cace397ec5ae517030df1e93ac2a21fce1255bfb612d1d07e0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockGovToken": {
        "src": "contracts\\MGGovToken.sol:11",
        "version": {
          "withMetadata": "fc35e9dae23f92145942fb7c3a0be3b4d1af445d953a5a9d75c3086cb2744820",
          "withoutMetadata": "d4618de7c0239f9c5ce1aa5f1d93cb567963f8e732b32d8cc282ab458c3bd695",
          "linkedWithoutMetadata": "d4618de7c0239f9c5ce1aa5f1d93cb567963f8e732b32d8cc282ab458c3bd695"
        },
        "inherit": [
          "BEP20",
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "mintFunc(address,uint256)",
          "burnFunc(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockGovToken",
            "src": "contracts\\MGGovToken.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maximumSupply",
            "src": "contracts\\MGGovToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MockGovToken",
              "label": "_maximumSupply",
              "type": "t_uint256",
              "src": "contracts\\MGGovToken.sol:14"
            },
            {
              "contract": "MockGovToken",
              "label": "_router",
              "type": "t_address",
              "src": "contracts\\MGGovToken.sol:15"
            },
            {
              "contract": "MockGovToken",
              "label": "_pairWeth",
              "type": "t_address",
              "src": "contracts\\MGGovToken.sol:16"
            },
            {
              "contract": "MockGovToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\MGGovToken.sol:27"
            },
            {
              "contract": "MockGovToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)804_storage))",
              "src": "contracts\\MGGovToken.sol:36"
            },
            {
              "contract": "MockGovToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts\\MGGovToken.sol:39"
            },
            {
              "contract": "MockGovToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\MGGovToken.sol:50"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)804_storage))": {
              "label": "mapping(address => mapping(uint32 => struct MockGovToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)804_storage)": {
              "label": "mapping(uint32 => struct MockGovToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)804_storage": {
              "label": "struct MockGovToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexFactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\MockStakingRewards.sol:303",
        "version": {
          "withMetadata": "59454877e2ecc731d3bccd91ea79ca80b32aa015c930243c42b8b2d054c66a3f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "mockStakingRewards": {
        "src": "contracts\\MockStakingRewards.sol:385",
        "version": {
          "withMetadata": "4f07233e3cc20765f348e37628fad65b2b2442c4d478a12ceacb7b5dbddf8c38",
          "withoutMetadata": "169808095d72d4477959b776b2824379470673e19be87f610fa1bb08a3f14d56",
          "linkedWithoutMetadata": "169808095d72d4477959b776b2824379470673e19be87f610fa1bb08a3f14d56"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "getUserDepositedAmount(address)",
          "getUserPendingReward(address)",
          "getTotalPending()",
          "getLatestRewardPerShare()",
          "getLpSupplyAndLastBlock()",
          "setMaxFundAmount(uint256)",
          "fund(uint256,uint256)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "harvest(address)",
          "sweep()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "mockStakingRewards",
            "src": "contracts\\MockStakingRewards.sol:454"
          },
          {
            "kind": "state-variable-immutable",
            "name": "startBlock",
            "src": "contracts\\MockStakingRewards.sol:414"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "mockStakingRewards",
              "label": "totalPaidOut",
              "type": "t_uint256",
              "src": "contracts\\MockStakingRewards.sol:417"
            },
            {
              "contract": "mockStakingRewards",
              "label": "rewardPerBlock",
              "type": "t_uint256",
              "src": "contracts\\MockStakingRewards.sol:419"
            },
            {
              "contract": "mockStakingRewards",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts\\MockStakingRewards.sol:421"
            },
            {
              "contract": "mockStakingRewards",
              "label": "lastFunded",
              "type": "t_uint256",
              "src": "contracts\\MockStakingRewards.sol:423"
            },
            {
              "contract": "mockStakingRewards",
              "label": "maxFundAmount",
              "type": "t_uint256",
              "src": "contracts\\MockStakingRewards.sol:425"
            },
            {
              "contract": "mockStakingRewards",
              "label": "mockTokenContract",
              "type": "t_contract(IERC20)1838",
              "src": "contracts\\MockStakingRewards.sol:432"
            },
            {
              "contract": "mockStakingRewards",
              "label": "mockLpTokenContract",
              "type": "t_contract(IERC20)1838",
              "src": "contracts\\MockStakingRewards.sol:434"
            },
            {
              "contract": "mockStakingRewards",
              "label": "poolInfo",
              "type": "t_struct(PoolInfo)2068_storage",
              "src": "contracts\\MockStakingRewards.sol:435"
            },
            {
              "contract": "mockStakingRewards",
              "label": "rewarder",
              "type": "t_address",
              "src": "contracts\\MockStakingRewards.sol:438"
            },
            {
              "contract": "mockStakingRewards",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)2063_storage)",
              "src": "contracts\\MockStakingRewards.sol:439"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1838": {
              "label": "contract IERC20"
            },
            "t_struct(PoolInfo)2068_storage": {
              "label": "struct mockStakingRewards.PoolInfo",
              "members": [
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accmockPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(UserInfo)2063_storage)": {
              "label": "mapping(address => struct mockStakingRewards.UserInfo)"
            },
            "t_struct(UserInfo)2063_storage": {
              "label": "struct mockStakingRewards.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts\\interfaces\\IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:98",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\libs\\BEP20.sol:11",
        "version": {
          "withMetadata": "8b55ab2537f3b6fbc0c0b0c68e52f1c110ae4a7e709f7a85cfd0e08e5bcefceb",
          "withoutMetadata": "a7f6f87dd5bc80f26dc7d5650a4f7e23ad2d006b9272115a3d664b36114bb999",
          "linkedWithoutMetadata": "a7f6f87dd5bc80f26dc7d5650a4f7e23ad2d006b9272115a3d664b36114bb999"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string)",
          "getOwner()",
          "name()",
          "decimals()",
          "symbol()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\libs\\BEP20.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BEP20.sol:15"
            },
            {
              "contract": "BEP20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BEP20.sol:17"
            },
            {
              "contract": "BEP20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BEP20.sol:19"
            },
            {
              "contract": "BEP20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BEP20.sol:21"
            },
            {
              "contract": "BEP20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BEP20.sol:22"
            },
            {
              "contract": "BEP20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BEP20.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\IBEP20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "7787f3721d991064c748bc01d3963aee669e9f253481db0f3505f2e43a68813d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexFactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexFactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexFactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexFactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexFactory.sol:550",
        "version": {
          "withMetadata": "ac52a32b1432c2011dc4248b4a2d68dbd9b299288fd682e537fa4ad440d1d345",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexFactory.sol:99",
        "version": {
          "withMetadata": "85a1270a46eebd49c119e03dd0b227eb6dda91243fb40434fffff6c4fe5f6f80",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexFactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexFactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexFactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexFactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexFactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexFactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexFactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexFactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexFactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexFactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexFactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexFactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexFactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexFactory.sol:464",
        "version": {
          "withMetadata": "7be1e6b83f236aa8daa2f0e0a41ac8d804213e5a1e0ce118c02d8a47a096d55e",
          "withoutMetadata": "6c36d9ff076a167d9314c2407ea20c9e07489a3b235b1f68db0576eee5c9e7d4",
          "linkedWithoutMetadata": "6c36d9ff076a167d9314c2407ea20c9e07489a3b235b1f68db0576eee5c9e7d4"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexFactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexFactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexFactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexFactory.sol:230",
        "version": {
          "withMetadata": "f16a6b472c1869e151e37eb8086602aaf530767bd12c27c6cbb69649ddebeeec",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexFactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexFactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexFactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexFactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexFactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexFactory.sol:575",
        "version": {
          "withMetadata": "e368888be935893a858ad4233714be8da19d328f27d7daf68b82ede5b55fa0c8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "WETH": {
        "src": "contracts\\libs\\weth.sol:5",
        "version": {
          "withMetadata": "5ce36234c2ba97b1c7c8bc318cfbcf91cebc259b44c09708a7760f20d04e6602",
          "withoutMetadata": "e2f908cd0a47e73fffc9e916c68301b899645121289275b3747b354cb7fb2ac6",
          "linkedWithoutMetadata": "e2f908cd0a47e73fffc9e916c68301b899645121289275b3747b354cb7fb2ac6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts\\libs\\weth.sol:6"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts\\libs\\weth.sol:7"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts\\libs\\weth.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETH",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\weth.sol:6"
            },
            {
              "contract": "WETH",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\weth.sol:7"
            },
            {
              "contract": "WETH",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\weth.sol:8"
            },
            {
              "contract": "WETH",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\weth.sol:15"
            },
            {
              "contract": "WETH",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\weth.sol:16"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMathInt": {
        "src": "contracts\\libs\\SafeMathInt.sol:5",
        "version": {
          "withMetadata": "c059f1da2e21372642dcb69e3ded67e6ffa3c234007e51b6ef8e767fa4219142",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "MinterRole": {
        "src": "contracts\\libs\\MinterRole.sol:7",
        "version": {
          "withMetadata": "c28ac9d7c5fbef45150f9d265584a657425c830e9b826f51cdca4cbf6b09fb5c",
          "withoutMetadata": "79c48f6c4c87903424dcd7fad223ac888d8aa556bfc15f75d66050a097b2b423",
          "linkedWithoutMetadata": "79c48f6c4c87903424dcd7fad223ac888d8aa556bfc15f75d66050a097b2b423"
        },
        "inherit": [],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "()",
          "isMinter(address)",
          "renounceMinter()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MinterRole",
            "src": "contracts\\libs\\MinterRole.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MinterRole",
              "label": "_minters",
              "type": "t_struct(Role)100_storage",
              "src": "contracts\\libs\\MinterRole.sol:13"
            }
          ],
          "types": {
            "t_struct(Role)100_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Roles": {
        "src": "contracts\\libs\\Roles.sol:5",
        "version": {
          "withMetadata": "05087cb998faa832b75672ffc2428715309cb73c0c86a083f28d1033cd24899f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\libs\\ERC20Detailed.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\libs\\ERC20Detailed.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:7"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:8"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20Detailed.sol:9"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "30f9e78633995fb4bb1f91645caaf10108a51f48ec2069569a7a1a1005549e9d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexRouter.sol:701",
        "version": {
          "withMetadata": "32cfe8193db133c85823de07ccef974e324e44785fcab2b81b9941e7d7f0493e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Minion": {
        "src": "contracts\\MockAccessControl.sol:5",
        "version": {
          "withMetadata": "b03d49d01cfb450c95c9e069266bcf8cd188eb13bc8b77d26e2702700d8c7465",
          "withoutMetadata": "d83de79e9a549862ca369e32dab8afdc6a0691f7c0fe28c7ba8e646d062c618e",
          "linkedWithoutMetadata": "d83de79e9a549862ca369e32dab8afdc6a0691f7c0fe28c7ba8e646d062c618e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "pwn()",
          "verify(address)",
          "retrieve()",
          "timeVal()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Minion",
            "src": "contracts\\MockAccessControl.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Minion",
              "label": "contributionAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\MockAccessControl.sol:7"
            },
            {
              "contract": "Minion",
              "label": "pwned",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MockAccessControl.sol:8"
            },
            {
              "contract": "Minion",
              "label": "owner",
              "type": "t_address",
              "src": "contracts\\MockAccessControl.sol:9"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts\\interfaces\\IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:98",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexRouter.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexFactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexRouter.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexRouter.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexRouter.sol:63",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexFactory.sol:550",
        "version": {
          "withMetadata": "2ad0fe750e2862465dc6fc458a5998db81e752f9fa692a011f4bcfc811fe986b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexFactory.sol:99",
        "version": {
          "withMetadata": "6662f5e9890e30d14fb3cdd766c9d5d0193729ddc8a448b01d393c38bed603fb",
          "withoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797",
          "linkedWithoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexFactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexFactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexFactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexFactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexFactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexFactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexFactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexFactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexFactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexFactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexFactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexFactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexFactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexFactory.sol:464",
        "version": {
          "withMetadata": "91b126edcd90c235b173775e86c77b88ce5c65dcddc39cac6dc13d7d6b7e5cf3",
          "withoutMetadata": "5f681284d1d036a0815268777d3590fa9b021bf1ea0c3517fa57695c7fbd0e92",
          "linkedWithoutMetadata": "5f681284d1d036a0815268777d3590fa9b021bf1ea0c3517fa57695c7fbd0e92"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexFactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexFactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexFactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexFactory.sol:230",
        "version": {
          "withMetadata": "27ef6cddcbb5a25fafc78d0c5c08ac2f6a794f01b542f87183140a3239f9f606",
          "withoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0",
          "linkedWithoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexFactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexFactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexFactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexFactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexFactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexFactory.sol:575",
        "version": {
          "withMetadata": "c837e76e48173873b618884439b7c9caca834f61b51bfac215e3a83e653c96a1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\libs\\dexRouter.sol:226",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapLibrary": {
        "src": "contracts\\libs\\dexRouter.sol:715",
        "version": {
          "withMetadata": "5683c56f02846240647fdc4d60a32fd1c68d9d7b6a641f24dbf4c39a8b8571c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:232",
        "version": {
          "withMetadata": "b49b3842129aa5d28dc61a459b8d4e5cdc0960e055e8c6d2ffe30f1a9a48cfee",
          "withoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb",
          "linkedWithoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb"
        },
        "inherit": [
          "IPancakeSwapRouter"
        ],
        "libraries": [
          "SafeMath",
          "PancakeSwapLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapRouter",
            "src": "contracts\\libs\\dexRouter.sol:243"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapRouter",
              "label": "factoryAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:235"
            },
            {
              "contract": "PancakeSwapRouter",
              "label": "WETHAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts\\libs\\dexRouter.sol:797",
        "version": {
          "withMetadata": "ee33936235c73567de31c9cdbc1a09993bf12690e61dc5ccaf1c6ffcde7c38c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "bbcff4a844bcc6d88bc4102204a3192020ca0647fd98f516c30746a9ac660974",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "TransferHelper": {
        "src": "contracts\\libs\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "6d1e151ab6957ea4930a311944d9e4a5bcbf1e2d6117a6b2046274b102e8da7b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "contracts\\libs\\SafeMath.sol:8",
        "version": {
          "withMetadata": "c8c77fc9f7d8bc79210dac6597ce01d3b4518356d3e43d84692784ec6073e1b9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StableMath": {
        "src": "contracts\\libs\\StableMath.sol:6",
        "version": {
          "withMetadata": "f6fcdb7e989c6719d0d9d322baae500756a80ec37c8661c20ce1a389c0ec2cdc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\MockStakingRewards.sol:5",
        "version": {
          "withMetadata": "3b6ad16c9e421b42650bdece71bb3830669b38fcd3c708661ce077ea3d03c86b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts\\MockStakingRewards.sol:187"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexFactory.sol:534",
        "version": {
          "withMetadata": "16b37e3eb04f84cace397ec5ae517030df1e93ac2a21fce1255bfb612d1d07e0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockGovToken": {
        "src": "contracts\\MGGovToken.sol:11",
        "version": {
          "withMetadata": "b791a895969c2411e0039806bd4158e339d2b5f638d4fa9bd633ef29f5b1376b",
          "withoutMetadata": "d4618de7c0239f9c5ce1aa5f1d93cb567963f8e732b32d8cc282ab458c3bd695",
          "linkedWithoutMetadata": "d4618de7c0239f9c5ce1aa5f1d93cb567963f8e732b32d8cc282ab458c3bd695"
        },
        "inherit": [
          "BEP20",
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "mintFunc(address,uint256)",
          "burnFunc(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockGovToken",
            "src": "contracts\\MGGovToken.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maximumSupply",
            "src": "contracts\\MGGovToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MockGovToken",
              "label": "_maximumSupply",
              "type": "t_uint256",
              "src": "contracts\\MGGovToken.sol:14"
            },
            {
              "contract": "MockGovToken",
              "label": "_router",
              "type": "t_address",
              "src": "contracts\\MGGovToken.sol:15"
            },
            {
              "contract": "MockGovToken",
              "label": "_pairWeth",
              "type": "t_address",
              "src": "contracts\\MGGovToken.sol:16"
            },
            {
              "contract": "MockGovToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\MGGovToken.sol:27"
            },
            {
              "contract": "MockGovToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)804_storage))",
              "src": "contracts\\MGGovToken.sol:36"
            },
            {
              "contract": "MockGovToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts\\MGGovToken.sol:39"
            },
            {
              "contract": "MockGovToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\MGGovToken.sol:50"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)804_storage))": {
              "label": "mapping(address => mapping(uint32 => struct MockGovToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)804_storage)": {
              "label": "mapping(uint32 => struct MockGovToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)804_storage": {
              "label": "struct MockGovToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexFactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\MockStakingRewards.sol:303",
        "version": {
          "withMetadata": "59454877e2ecc731d3bccd91ea79ca80b32aa015c930243c42b8b2d054c66a3f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "mockStakingRewards": {
        "src": "contracts\\MockStakingRewards.sol:385",
        "version": {
          "withMetadata": "4f07233e3cc20765f348e37628fad65b2b2442c4d478a12ceacb7b5dbddf8c38",
          "withoutMetadata": "169808095d72d4477959b776b2824379470673e19be87f610fa1bb08a3f14d56",
          "linkedWithoutMetadata": "169808095d72d4477959b776b2824379470673e19be87f610fa1bb08a3f14d56"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "getUserDepositedAmount(address)",
          "getUserPendingReward(address)",
          "getTotalPending()",
          "getLatestRewardPerShare()",
          "getLpSupplyAndLastBlock()",
          "setMaxFundAmount(uint256)",
          "fund(uint256,uint256)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "harvest(address)",
          "sweep()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "mockStakingRewards",
            "src": "contracts\\MockStakingRewards.sol:454"
          },
          {
            "kind": "state-variable-immutable",
            "name": "startBlock",
            "src": "contracts\\MockStakingRewards.sol:414"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "mockStakingRewards",
              "label": "totalPaidOut",
              "type": "t_uint256",
              "src": "contracts\\MockStakingRewards.sol:417"
            },
            {
              "contract": "mockStakingRewards",
              "label": "rewardPerBlock",
              "type": "t_uint256",
              "src": "contracts\\MockStakingRewards.sol:419"
            },
            {
              "contract": "mockStakingRewards",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts\\MockStakingRewards.sol:421"
            },
            {
              "contract": "mockStakingRewards",
              "label": "lastFunded",
              "type": "t_uint256",
              "src": "contracts\\MockStakingRewards.sol:423"
            },
            {
              "contract": "mockStakingRewards",
              "label": "maxFundAmount",
              "type": "t_uint256",
              "src": "contracts\\MockStakingRewards.sol:425"
            },
            {
              "contract": "mockStakingRewards",
              "label": "mockTokenContract",
              "type": "t_contract(IERC20)1838",
              "src": "contracts\\MockStakingRewards.sol:432"
            },
            {
              "contract": "mockStakingRewards",
              "label": "mockLpTokenContract",
              "type": "t_contract(IERC20)1838",
              "src": "contracts\\MockStakingRewards.sol:434"
            },
            {
              "contract": "mockStakingRewards",
              "label": "poolInfo",
              "type": "t_struct(PoolInfo)2068_storage",
              "src": "contracts\\MockStakingRewards.sol:435"
            },
            {
              "contract": "mockStakingRewards",
              "label": "rewarder",
              "type": "t_address",
              "src": "contracts\\MockStakingRewards.sol:438"
            },
            {
              "contract": "mockStakingRewards",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)2063_storage)",
              "src": "contracts\\MockStakingRewards.sol:439"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1838": {
              "label": "contract IERC20"
            },
            "t_struct(PoolInfo)2068_storage": {
              "label": "struct mockStakingRewards.PoolInfo",
              "members": [
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accmockPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(UserInfo)2063_storage)": {
              "label": "mapping(address => struct mockStakingRewards.UserInfo)"
            },
            "t_struct(UserInfo)2063_storage": {
              "label": "struct mockStakingRewards.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts\\interfaces\\IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:98",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\libs\\BEP20.sol:11",
        "version": {
          "withMetadata": "a61282609d860b1a2d2ca360f5d4e0fab35d8b005b767d32724f5f3ece7e4271",
          "withoutMetadata": "a7f6f87dd5bc80f26dc7d5650a4f7e23ad2d006b9272115a3d664b36114bb999",
          "linkedWithoutMetadata": "a7f6f87dd5bc80f26dc7d5650a4f7e23ad2d006b9272115a3d664b36114bb999"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string)",
          "getOwner()",
          "name()",
          "decimals()",
          "symbol()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\libs\\BEP20.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BEP20.sol:15"
            },
            {
              "contract": "BEP20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BEP20.sol:17"
            },
            {
              "contract": "BEP20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BEP20.sol:19"
            },
            {
              "contract": "BEP20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BEP20.sol:21"
            },
            {
              "contract": "BEP20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BEP20.sol:22"
            },
            {
              "contract": "BEP20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BEP20.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\IBEP20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "7787f3721d991064c748bc01d3963aee669e9f253481db0f3505f2e43a68813d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexFactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexFactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexFactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexFactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexFactory.sol:550",
        "version": {
          "withMetadata": "ac52a32b1432c2011dc4248b4a2d68dbd9b299288fd682e537fa4ad440d1d345",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexFactory.sol:99",
        "version": {
          "withMetadata": "85a1270a46eebd49c119e03dd0b227eb6dda91243fb40434fffff6c4fe5f6f80",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexFactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexFactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexFactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexFactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexFactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexFactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexFactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexFactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexFactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexFactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexFactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexFactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexFactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexFactory.sol:464",
        "version": {
          "withMetadata": "7be1e6b83f236aa8daa2f0e0a41ac8d804213e5a1e0ce118c02d8a47a096d55e",
          "withoutMetadata": "6c36d9ff076a167d9314c2407ea20c9e07489a3b235b1f68db0576eee5c9e7d4",
          "linkedWithoutMetadata": "6c36d9ff076a167d9314c2407ea20c9e07489a3b235b1f68db0576eee5c9e7d4"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexFactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexFactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexFactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexFactory.sol:230",
        "version": {
          "withMetadata": "f16a6b472c1869e151e37eb8086602aaf530767bd12c27c6cbb69649ddebeeec",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexFactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexFactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexFactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexFactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexFactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexFactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexFactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexFactory.sol:575",
        "version": {
          "withMetadata": "e368888be935893a858ad4233714be8da19d328f27d7daf68b82ede5b55fa0c8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}